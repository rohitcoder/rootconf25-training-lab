name: Test eBPF openat

on:
  workflow_dispatch:

jobs:
  ebpf-test-openat:
    runs-on: ubuntu-latest
    steps:
      - name: Install BCC
        run: |
          sudo apt-get update
          sudo apt-get install -y bpfcc-tools python3-bpfcc linux-headers-$(uname -r)

      - name: Run eBPF script (trace openat/openat2)
        run: |
          cat > openat_probe.py <<'EOF'
          from bcc import BPF

          bpf_code = """
          #include <uapi/linux/ptrace.h>
          #include <linux/sched.h>
          #include <linux/limits.h>

          TRACEPOINT_PROBE(syscalls, sys_enter_openat) {
              char comm[TASK_COMM_LEN];
              char fname[PATH_MAX];
              __builtin_memset(comm, 0, sizeof(comm));
              __builtin_memset(fname, 0, sizeof(fname));

              bpf_get_current_comm(&comm, sizeof(comm));
              int ret = bpf_probe_read_user_str(&fname, sizeof(fname), args->filename);

              if (ret > 0) {
                  bpf_trace_printk("[OPENAT] proc=%s file=%s\\n", comm, fname);
              }
              return 0;
          }

          TRACEPOINT_PROBE(syscalls, sys_enter_openat2) {
              char comm[TASK_COMM_LEN];
              char fname[PATH_MAX];
              __builtin_memset(comm, 0, sizeof(comm));
              __builtin_memset(fname, 0, sizeof(fname));

              bpf_get_current_comm(&comm, sizeof(comm));
              int ret = bpf_probe_read_user_str(&fname, sizeof(fname), args->filename);

              if (ret > 0) {
                  bpf_trace_printk("[OPENAT2] proc=%s file=%s\\n", comm, fname);
              }
              return 0;
          }
          """

          b = BPF(text=bpf_code)
          print("Tracing ALL openat/openat2 syscalls for 15s...")
          b.trace_print(duration=15)
          EOF

          sudo python3 openat_probe.py

      - name: Generate test file access
        run: |
          echo "hello" > test.txt
          cat test.txt
          ls /etc/passwd
